# Copyright (C) 2012 Petr Machata, Red Hat Inc.

set testfile "filt"
set srcfile0 $srcdir/$subdir/$testfile.c
set binfile0 $objdir/$subdir/$testfile
set base1 "filt1"
set srcfile1 $srcdir/$subdir/$base1.c
set binfile1 $objdir/$subdir/lib$base1.so
set base2 "filt2"
set srcfile2 $srcdir/$subdir/$base2.c
set binfile2 $objdir/$subdir/lib$base2.so

if [get_compiler_info $binfile0] {
  return -1
}

verbose "compiling source file now....."
if { [ltrace_compile_shlib $srcfile2 $binfile2 debug ] != "" 
  || [ltrace_compile_shlib $srcfile1 $binfile1 debug ] != "" 
  || [ltrace_compile $srcfile0 $binfile0 executable [list debug shlib=$binfile1 shlib=$binfile2] ] != ""} {
  send_user "Testcase compile failed, so all tests in this file will automatically fail.\n"
}

ltrace_options "-e*"
set exec_output [ltrace_runtest $objdir/$subdir $binfile0]

# Check the output of this program.
verbose "ltrace runtest output: $exec_output\n"
if [regexp {ELF from incompatible architecture} $exec_output] {
	fail "32-bit ltrace can not perform on 64-bit PUTs and rebuild ltrace in 64 bit mode!"
	return 
} elseif [ regexp {Couldn't get .hash data} $exec_output ] {
	fail "Couldn't get .hash data!"
	return
}

ltrace_verify_output ${binfile0}.ltrace "filt->func1" 1
ltrace_verify_output ${binfile0}.ltrace "libfilt1.so->func2" 1
ltrace_verify_output ${binfile0}.ltrace "libfilt2.so->puts" 1
ltrace_verify_output ${binfile0}.ltrace "func2 resumed" 1
ltrace_verify_output ${binfile0}.ltrace "func1 resumed" 1

# I simply can't figure out how to pass an empty string to
# ltrace_options without that getting interpreted as {}, so pass
# something harmless instead.
ltrace_options "-b"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "^func1(.*)" 1

ltrace_options "-e@MAIN"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "filt->func1(.*)" 1

ltrace_options "-e@libfilt1.so"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "libfilt1.so->func2(.*)" 1

ltrace_options "-e@libfilt2.so"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "libfilt2.so->puts(.*)" 1

ltrace_options "-e@libfilt*"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "libfilt1.so->func2(" 1
ltrace_verify_output ${binfile0}.ltrace "libfilt2.so->puts(.*)" 1
ltrace_verify_output ${binfile0}.ltrace "func2 resumed" 1

ltrace_options "-efunc*"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "filt->func1(" 1
ltrace_verify_output ${binfile0}.ltrace "libfilt1.so->func2(.*)" 1
ltrace_verify_output ${binfile0}.ltrace "func1 resumed" 1

# Check that we handle breakpoint on both PLT entry and entry point
ltrace_options "-efunc1" "-xfunc1"
ltrace_runtest $objdir/$subdir $binfile0
ltrace_verify_output ${binfile0}.ltrace "filt->func1(" 1
ltrace_verify_output ${binfile0}.ltrace "func1@libfilt1.so(.*)" 1
ltrace_verify_output ${binfile0}.ltrace "func1 resumed" 1
